{"version":3,"sources":["../src/ui_practicon.js"],"names":["define","$","ui_ace","textArea","document","getElementById","PracticonUi","textareaId","width","height","templateParams","readOnly","prop","fail","i","ifspec","elements","attr","JSON","parse","push","err","alert","practiconDiv","reload","prototype","failed","sync","serialisation","getFields","each","value","type","name","val","hasOwnProperty","stringify","getElement","window","MathJax","Hub","Queue","find","content","valuesToLoad","foundVariables","html","printField","elt","values","fieldno","label","text","htm","length","e","forEach","index","Array","isArray","sub","resize","hasFocus","focused","activeElement","destroy","remove","Constructor"],"mappings":"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","sourcesContent":["/**\n * Implementation of the practicon_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin replaces the usual textarea answer element with a div\n * containing the author-supplied interface elements. Their serialisation\n * which is what is essentially copied back into the textarea for submissions\n * as the answer, is a JSON object. The fields are defined by JSON definitions\n * in the The fields of that object are the names\n * of all author-supplied HTML elements with a class 'coderunner-ui-element';\n * all such objects are expected to have a 'name' attribute as well. The\n * associated field values are lists. Each list contains all the values, in\n * document order, of the results of calling the jquery val() method in turn\n * on each of the UI elements with that name.\n * This means that at least input, select and textarea\n * elements are supported. The author is responsible for checking the\n * compatibility of other elements with jquery's val() method.\n *\n * The HTML to use in the answer area must be provided as the contents of\n * the globalextra field in the question authoring form.\n *\n * If any fields of the answer html are to be preloaded, these should be specified\n * in the answer preload with json of the form '{\"<fieldName>\": \"<fieldValueList>\",...}'\n * where fieldValueList is a list of all the values to be assigned to the fields\n * with the given name, in document order.\n *\n * To accommodate the possibility of dynamic HTML, any leftover preload values,\n * that is, values that cannot be positioned within the HTML either because\n * there is no field of the required name or because, in the case of a list,\n * there are insufficient elements, are assigned to the data['leftovers']\n * attribute of the outer html div, as a sub-object of the original object.\n * This outer div can be located as the 'closest' (in a jQuery sense)\n * div.qtype-coderunner-html-outer-div. The author-supplied HTML must include\n * JavaScript to make use of the 'leftovers'.\n *\n * As a special case of the serialisation, if all values in the serialisation\n * are either empty strings or a list of empty strings, the serialisation is\n * itself the empty string.\n *\n * @package    qtype\n * @subpackage coderunner\n * @copyright  Rene van Paassen, 2020, Delft University of Techonology,\n *             based on code by Richard Lobb, 2018, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\"jquery\", \"qtype_coderunner/ui_ace\"], function($, ui_ace) {\n\n    // if this works, we are in question editing mode\n    var textArea = document.getElementById(\"id_answer\");\n    if (textArea !== null) {\n        return ui_ace;\n    }\n\n    function PracticonUi(textareaId, width, height, templateParams) {\n        this.textArea = $(document.getElementById(textareaId));\n        this.readOnly = this.textArea.prop(\"readonly\");\n        this.fail = false;\n        this.templateParams = templateParams;\n        var i = 0, ifspec;\n\n        this.elements = [];\n        while (this.textArea.attr(\"extra-test\" + i) !== undefined) {\n            try {\n                ifspec = JSON.parse(this.textArea.attr(\"extra-test\" + i));\n                if (ifspec !== null) {\n                    this.elements.push(ifspec);\n                }\n            } catch (err) {\n                alert(\"Practicon UI, field definition \" + (i+1) +\n                      \" is defective\");\n            }\n            i++;\n        }\n        this.practiconDiv = null;\n        this.reload();\n    }\n\n    PracticonUi.prototype.failed = function () {\n        return this.fail;\n    };\n\n    PracticonUi.prototype.sync = function () {\n        var serialisation = {};\n\n        this.getFields().each(function () {\n            var value,\n                type = $(this).attr(\"type\"),\n                name = $(this).attr(\"name\");\n            if (type === \"checkbox\") {\n                value = $(this).prop(\"checked\") ? 1 : 0;\n            } else if (type === \"radio\") {\n                if ($(this).prop(\"checked\")) {\n                    value = $(this).val();\n                }\n            } else {\n                value = $(this).val();\n            }\n            if (value !== undefined) {\n                if (serialisation.hasOwnProperty(name)) {\n                    alert(\"duplicate name '\" + name + \"' in interface\");\n                }\n                serialisation[name] = value;\n            }\n        });\n        this.textArea.val(JSON.stringify(serialisation));\n    };\n\n    PracticonUi.prototype.getElement = function () {\n        /* restart MathJax if present. Note that MathJax is only loaded\n           if there is an equation in the question text. */\n        if (window) {\n            if (window.MathJax) {\n                window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n            }\n        }\n        return this.practiconDiv;\n    };\n\n    PracticonUi.prototype.getFields = function () {\n        return $(this.practiconDiv).find(\".coderunner-ui-element\");\n    };\n\n    PracticonUi.prototype.reload = function () {\n        var content = $(this.textArea).val(),\n            valuesToLoad = {},\n            foundVariables = {},\n            html = \"<div style='height:fit-content' class='qtype-coderunner-html-outer-div fcontainer clearfix'>\",\n            printField = function (elt, values, fieldno) {\n                var name = elt.name,\n                    type = elt.type,\n                    label = elt.label,\n                    text = elt.text,\n                    value = values[name],\n                    i,\n                    htm;\n                if (!type) {\n                    type = \"text\";\n                }\n                if (!label) {\n                    label = \"variable '\" + name + \"'\";\n                }\n                if (!name) {\n                    alert(\"Practicon UI: name missing at \" + fieldno);\n                }\n                if (foundVariables[name]) {\n                    alert(\"Practicon UI: variable '\" + name + \"' multiple use\");\n                }\n                if (!value) { value = \"\"; }\n                // per question check div with line\n                htm = \"<div class='form-group row fitem border-bottom px-4'>\";\n                if (type === \"text\") {\n                    htm += \"<div class='col-md-8'>\" +\n                        \"<label class='col-form-label d-inline answerprompt'>\" + label +\n                        \"</label></div><div class='col-md-4 form-inline felement edit_code' data-fieldtype='text'>\" +\n                        \"<input type='text' class='coderunner-ui-element mform form-inline form-control'\" +\n                        \" style='width: 100%' name='\" +\n                        name + \"' id='\" + name + \"' value='\" + value + \"' size='80'/></div>\";\n                } else if (type === \"checkbox\") {\n                    htm += \"<div class='col-md-1 form-inline felement edit_code' data-fieldtype='checkbox'>\" +\n                        \"<input type='checkbox' class='coderunner-ui-element form-check-input' name='\" +\n                        name + \"' id='\" + name + (value ? \"' checked='1' />\" : \"' />\") +\n                        \"</div><div class='col-md-11'><label class='col-form-label d-inline answerprompt'>\" +\n                        text + \"</label></div>\";\n                } else if (type === \"textarea\") {\n                    htm += \"<div class='col-md-4'>\" +\n                        \"<label class='col-form-label d-inline answerprompt'>\" + label +\n                        \"</label></div><div class='col-md-8 form-inline felement edit_code' data-fieldtype='textarea'>\" +\n                        \"<textarea class='coderunner-ui-element edit_code mform form-control d-block' name='\" +\n                        name + \"' id='\" + name +\n                        \"' rows='3'>\" + value + \"</textarea></div>\";\n                } else if (type === \"radio\") {\n                    for (i = 0; i < text.length; i++) {\n                        htm += \"\" +\n                            \"<div class='col-md-1 form-inline felement edit_code' data-fieldtype='radio'>\" +\n                            \"<input type='radio' name='\" + name +\n                            \"' class='coderunner-ui-element form-radio-input' value='\" + (i + 1) +\n                            (value == (i + 1) ? \"' checked/>\" : \"'/>\") + \"</div><div class='col-md-11'>\" +\n                            \"<label class='col-form-label d-inline answerprompt'>\" +\n                            text[i] + \"</label></div>\";\n                    }\n                }\n                htm += \"</div>\";\n                return htm;\n            };\n\n        if (content) {\n            try {\n                valuesToLoad = JSON.parse(content);\n            } catch (e) {\n                alert(\"No values to load\");\n            }\n        }\n\n        this.elements.forEach(function (elt, index) {\n            html += \"<div class='fcontainer clearfix'>\";\n            if (Array.isArray(elt)) {\n                // run through all fields\n                elt.forEach(function (sub) {\n                    html += printField(sub, valuesToLoad, index);\n                });\n            } else {\n                html += printField(elt, valuesToLoad, index);\n            }\n            html += \"</div>\";\n        });\n        html += \"</div>\";\n        this.practiconDiv = $(html);\n    };\n\n    PracticonUi.prototype.resize = function () { };\n\n    PracticonUi.prototype.hasFocus = function () {\n        var focused = false;\n        this.getFields().each(function () {\n            if (this === document.activeElement) {\n                focused = true;\n            }\n        });\n        return focused;\n    };\n\n    PracticonUi.prototype.destroy = function () {\n        this.sync();\n        $(this.practiconDiv).remove();\n        this.practiconDiv = null;\n    };\n\n    return {\n        Constructor: PracticonUi\n    };\n});\n"],"file":"ui_practicon.min.js"}